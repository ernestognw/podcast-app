{"version":3,"file":"5.97270d0986378a67135c.hot-update.js","sources":["webpack:///components/podcast-player.js","webpack:///pages/channel.js"],"sourcesContent":["import { Link } from '../routes'\nimport slug from '../helpers/slug'\n\nexport default class PodcastPlayer extends React.Component {\n  render() {\n    const { clip, onClose } = this.props\n\n    return <div className=\"modal\">\n      <div className='clip'>\n        <nav>\n          { onClose ?\n            <a onClick={onClose}>&lt; Volver</a>\n            :\n            <Link route='channel' \n              params={{ slug: slug(clip.channel.title), id: clip.channel.id }} \n              prefetch>\n              <a className='close'>&lt; Volver</a>\n            </Link>\n          }\n        </nav>\n\n        <picture>\n          <div style={{ backgroundImage: `url(${clip.urls.image || clip.channel.urls.logo_image.original})` }} />\n        </picture>\n\n        <div className='player'>\n          <h3>{ clip.title }</h3>\n          <h6>{ clip.channel.title }</h6>\n          <audio controls autoPlay={true}>\n            <source src={clip.urls.high_mp3} type='audio/mpeg' />\n          </audio>\n        </div>\n      </div>\n\n      <style jsx>{`\n        nav {\n          background: none;\n        }\n        nav a {\n          display: inline-block;\n          padding: 15px;\n          color: white;\n          cursor: pointer;\n          text-decoration: none;\n        }\n        .clip {\n          display: flex;\n          height: 100%;\n          flex-direction: column;\n          background: #8756ca;\n          color: white;\n        }\n        picture {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          flex: 1 1;\n          flex-direction: column;\n          width: auto;\n          padding: 10%;\n        }\n        picture div {\n          width: 100%;\n          height: 100%;\n          background-position: 50% 50%;\n          background-size: contain;\n          background-repeat: no-repeat;\n        }\n        .player {\n          padding: 30px;\n          background: rgba(0,0,0,0.3);\n          text-align: center;\n        }\n        h3 {\n          margin: 0;\n        }\n        h6 {\n          margin: 0;\n          margin-top: 1em;\n        }\n        audio {\n          margin-top: 2em;\n          width: 100%;\n        }\n\n        .modal {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          z-index: 99999;\n        }\n      `}</style>\n    </div>\n  }\n}\n\n\n// WEBPACK FOOTER //\n// components/podcast-player.js","import \"isomorphic-fetch\";\nimport Error from './_error';\nimport Layout from '../components/layout'\nimport ChannelGrid from '../components/channel-grid'\nimport PodcastListWithClick from '../components/podcast-list-with-click'\nimport PodcastPlayer from '../components/podcast-player';\n\nexport default class extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      openPodcast: null,\n    }\n  }\n\n  static async getInitialProps({ query, res }) {\n    try {\n      let idChannel = query.id;\n  \n      let [reqChannel, reqAudios, reqSeries] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n      ])\n\n      if(reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status;\n        return { channel: null, audioClips: null, series: null, statusCode: reqChannel.status }\n      }\n  \n      let [dataChannel, dataAudios, dataSeries] = await Promise.all([\n        reqChannel.json(),\n        reqAudios.json(),\n        reqSeries.json()\n      ])\n  \n      let channel = dataChannel.body.channel;\n      let audioClips = dataAudios.body.audio_clips;\n      let series = dataSeries.body.channels;\n  \n      return { channel, audioClips, series, statusCode: 200 };\n    } catch (e) {\n      return { channel: null, audioClips: null, series: null, statusCode: 503 }\n    }\n  }\n\n  openPodcast = (event, podcast) => {\n    event.preventDefault();\n    this.setState({\n      openPodcast: podcast,\n    })\n  }\n\n  render() {\n    const { channel, audioClips, series, statusCode } = this.props\n    const { openPodcast } = this.state;\n\n    if (statusCode !== 200) {\n      return <Error statusCode={ statusCode }/>\n    }\n\n    return (\n      <Layout title={channel.title}>\n        <div className=\"banner\" style={{ backgroundImage: `url(${channel.urls.banner_image.original})` }} />\n\n        { openPodcast && <div>Hay un podcast abierto</div> }\n        \n        <h2>{ channel.title }</h2>\n\n        { series.length > 0 &&\n          <div>\n            <h3>Series</h3>\n            <ChannelGrid channels={ series } />\n          </div>\n        }\n\n        <h3>Ãšltimos Podcasts</h3>\n        <PodcastListWithClick \n          podcasts={ audioClips }\n          onClickPodcast={this.openPodcast}\n        />\n\n        <style jsx>{`\n          .banner {\n            width: 100%;\n            padding-bottom: 25%;\n            background-position: 50% 50%;\n            background-size: cover;\n            background-color: #aaa;\n          }\n          h2 {\n            font-weight: 600;\n            padding: 15px;\n          }\n          h3 {\n            padding: 15px;\n            font-size: 1.2em;\n            font-weight: 600;\n            margin: 0;\n          }\n          .modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            z-index: 99999;\n          }\n        `}</style>\n      </Layout>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// pages/channel.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBA;AAAA;AAAA;AAwFA;;;;AA5FA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAuCA;AACA;AAAA;AACA;AADA;AAGA;AA3CA;AAEA;AACA;AADA;AAFA;AAKA;AACA;;;AAuCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AAiDA;;;;;;;;;;;;;AAhGA;;AAEA;;AAEA;AACA;;;;AADA;AAAA;AAAA;AACA;AAKA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;;;;AADA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AArCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}